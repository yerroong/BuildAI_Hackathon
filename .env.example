####################################
#### Server & DB Configurations ####
####################################

# Cache Configs
CACHE_STORE=database # Defaults to database. Other available cache store: redis and filesystem
CACHE_DIR=./data/cache # Directory to store the cache files if using filesystem cache
REDIS_URL=           # Redis URL - could be a local redis instance or cloud hosted redis. Also support rediss:// URLs
PGLITE_DATA_DIR=     #../pgLite/ if selecting a directory   --- or memory:// if selecting in memory

# Eliza Server & Port Config
SERVER_URL=http://localhost
SERVER_PORT=3000

# Supabase Configuration
SUPABASE_URL=
SUPABASE_ANON_KEY=

# MongoDB
MONGODB_CONNECTION_STRING=             #mongodb connection string
MONGODB_DATABASE=                      #name of the database in mongoDB atlas #default: 'elizaAgent'

# Comma separated list of remote character urls (optional)
REMOTE_CHARACTER_URLS=

# Stores characters set by using the direct API in the data/character folder for further load when the app restarts
USE_CHARACTER_STORAGE=false

# Logging
DEFAULT_LOG_LEVEL=info
LOG_JSON_FORMAT=false            # Print everything in logger as json; false by default

###############################
#### Client Configurations ####
###############################

# BitMind Bittensor API
BITMIND=true
BITMIND_API_TOKEN=

# Discord Configuration
DISCORD_APPLICATION_ID=
DISCORD_API_TOKEN=        # Bot token
DISCORD_VOICE_CHANNEL_ID= # The ID of the voice channel the bot should join (optional)

# Devin Configuration
DEVIN_API_TOKEN=         # Get your API key from docs.devin.ai/tutorials/api-integration

# Gelato Configuration
GELATO_RELAY_API_KEY= # Gelato API key

# Farcaster Neynar Configuration
FARCASTER_FID=                # The FID associated with the account your are sending casts from
FARCASTER_NEYNAR_API_KEY=     # Neynar API key: https://neynar.com/
FARCASTER_NEYNAR_SIGNER_UUID= # Signer for the account you are sending casts from. Create a signer here: https://dev.neynar.com/app
FARCASTER_DRY_RUN=false       # Set to true if you want to run the bot without actually publishing casts
FARCASTER_POLL_INTERVAL=120   # How often (in seconds) the bot should check for farcaster interactions (replies and mentions)

# Telegram Configuration
TELEGRAM_BOT_TOKEN=

# Telegram account client Configuration
TELEGRAM_ACCOUNT_PHONE=              # Account phone number for authorization
TELEGRAM_ACCOUNT_APP_ID=             # Telegram app api_id (get it at me.telegram.org)
TELEGRAM_ACCOUNT_APP_HASH=           # Telegram app api_hash (get it at me.telegram.org)
TELEGRAM_ACCOUNT_DEVICE_MODEL=       # Device model. Example: Samsung Galaxy S28+
TELEGRAM_ACCOUNT_SYSTEM_VERSION=     # Device system version. Example: Android 12 S? (31)

# Twitter/X Configuration
TWITTER_DRY_RUN=false
TWITTER_USERNAME= # Account username
TWITTER_PASSWORD= # Account password
TWITTER_EMAIL=    # Account email
TWITTER_2FA_SECRET=

# Authentication cookies for Twitter session (this is for login using cookies and is optional)
TWITTER_COOKIES_AUTH_TOKEN=
TWITTER_COOKIES_CT0=
TWITTER_COOKIES_GUEST_ID=

TWITTER_POLL_INTERVAL=120   # How often (in seconds) the bot should check for interactions
TWITTER_SEARCH_ENABLE=FALSE # Enable timeline search, WARNING this greatly increases your chance of getting banned
TWITTER_TARGET_USERS=       # Comma separated list of Twitter user names to interact with
TWITTER_RETRY_LIMIT=        # Maximum retry attempts for Twitter login
TWITTER_SPACES_ENABLE=false # Enable or disable Twitter Spaces logic
ENABLE_TWITTER_POST_GENERATION=true # Set to true to enable automatic tweet generation. If false, the bot will not generate or post tweets.
# Post Interval Settings (in minutes)
POST_INTERVAL_MIN= # Default: 90
POST_INTERVAL_MAX= # Default: 180
POST_IMMEDIATELY=  # Default: false
# Twitter action processing configuration
ACTION_INTERVAL=               # Interval in minutes between action processing runs (default: 5 minutes)
ENABLE_ACTION_PROCESSING=false # Set to true to enable the action processing loop
MAX_ACTIONS_PROCESSING=1       # Maximum number of actions (e.g., retweets, likes) to process in a single cycle. Helps prevent excessive or uncontrolled actions.
ACTION_TIMELINE_TYPE=foryou    # Type of timeline to interact with. Options: "foryou" or "following". Default: "foryou"
# CONFIGURATION FOR APPROVING TWEETS BEFORE IT GETS POSTED
TWITTER_APPROVAL_DISCORD_CHANNEL_ID=  # Channel ID for the Discord bot to listen and send approval messages
TWITTER_APPROVAL_DISCORD_BOT_TOKEN=   # Discord bot token (this could be a different bot token from DISCORD_API_TOKEN)
TWITTER_APPROVAL_ENABLED=             # Enable or disable Twitter approval logic #Default is false
TWITTER_APPROVAL_CHECK_INTERVAL=60000 # Default: 60 seconds

# WhatsApp Cloud API Configuration
WHATSAPP_ACCESS_TOKEN=         # Permanent access token from Facebook Developer Console
WHATSAPP_PHONE_NUMBER_ID=      # Phone number ID from WhatsApp Business API
WHATSAPP_BUSINESS_ACCOUNT_ID=  # Business Account ID from Facebook Business Manager
WHATSAPP_WEBHOOK_VERIFY_TOKEN= # Custom string for webhook verification
WHATSAPP_API_VERSION=v17.0     # WhatsApp API version (default: v17.0)

# Alexa Client Configuration
ALEXA_SKILL_ID=                # Your Alexa skill ID from developer console (format: amzn1.ask.skill-...)
ALEXA_CLIENT_ID=               # OAuth2 Client ID from Alexa developer console permissions tab
ALEXA_CLIENT_SECRET=           # OAuth2 Client Secret from Alexa developer console permissions tab


# Simsai Specific Configuration
SIMSAI_API_KEY= # API key for SimsAI authentication
SIMSAI_AGENT_ID= # Unique identifier for the SimsAI agent
SIMSAI_USERNAME= # Username for SimsAI platform access
SIMSAI_DRY_RUN= # Set to true to test without making actual API calls

# Direct Client Setting
EXPRESS_MAX_PAYLOAD= # Default: 100kb

#######################################
#### Model Provider Configurations ####
#######################################

# OpenAI Configuration
OPENAI_API_KEY=         # OpenAI API key, starting with sk-
OPENAI_API_URL=         # OpenAI API Endpoint (optional), Default: https://api.openai.com/v1
SMALL_OPENAI_MODEL=     # Default: gpt-4o-mini
MEDIUM_OPENAI_MODEL=    # Default: gpt-4o
LARGE_OPENAI_MODEL=     # Default: gpt-4o
EMBEDDING_OPENAI_MODEL= # Default: text-embedding-3-small
IMAGE_OPENAI_MODEL=     # Default: dall-e-3
USE_OPENAI_EMBEDDING=   # Set to TRUE for OpenAI/1536, leave blank for local

# Community Plugin for OpenAI Configuration
ENABLE_OPEN_AI_COMMUNITY_PLUGIN=false
OPENAI_DEFAULT_MODEL=
OPENAI_MAX_TOKENS=
OPENAI_TEMPERATURE=




# Atoma SDK Configuration
ATOMASDK_BEARER_AUTH=           # Atoma SDK Bearer Auth token
ATOMA_API_URL=                  # Default: https://api.atoma.network/v1
SMALL_ATOMA_MODEL=              # Default: meta-llama/Llama-3.3-70B-Instruct
MEDIUM_ATOMA_MODEL=             # Default: meta-llama/Llama-3.3-70B-Instruct
LARGE_ATOMA_MODEL=              # Default: meta-llama/Llama-3.3-70B-Instruct

# Eternal AI's Decentralized Inference API
ETERNALAI_URL=
ETERNALAI_MODEL=                    # Default: "NousResearch/Hermes-3-Llama-3.1-70B-FP8"
ETERNALAI_CHAIN_ID=8453            # Default: "8453"
ETERNALAI_RPC_URL=                  # Ex: https://mainnet.base.org/
ETERNALAI_AGENT_CONTRACT_ADDRESS=   # Ex: 0xAed016e060e2fFE3092916b1650Fc558D62e1CCC
ETERNALAI_AGENT_ID=                 # Ex: 1711
ETERNALAI_API_KEY=
ETERNALAI_LOG=false #Default: false

# Hyperbolic Provider Configuration
HYPERBOLIC_API_KEY= # Hyperbolic API Key
HYPERBOLIC_MODEL=

IMAGE_HYPERBOLIC_MODEL=  # Default: FLUX.1-dev
SMALL_HYPERBOLIC_MODEL=  # Default: meta-llama/Llama-3.2-3B-Instruct
MEDIUM_HYPERBOLIC_MODEL= # Default: meta-llama/Meta-Llama-3.1-70B-Instruct
LARGE_HYPERBOLIC_MODEL=  # Default: meta-llama/Meta-Llama-3.1-405-Instruct


# Hyperbolic Plugin Configuration
HYPERBOLIC_ENV=production
HYPERBOLIC_API_KEY=
HYPERBOLIC_GRANULAR_LOG=true
HYPERBOLIC_SPASH=true
HYPERBOLIC_LOG_LEVEL=debug

# Infera Configuration
INFERA_API_KEY=      # visit api.infera.org/docs to obtain an API key under /signup_user
INFERA_MODEL=        # Default: llama3.2:latest
INFERA_SERVER_URL=   # Default: https://api.infera.org/
SMALL_INFERA_MODEL=  #Recommended: llama3.2:latest
MEDIUM_INFERA_MODEL= #Recommended: mistral-nemo:latest
LARGE_INFERA_MODEL=  #Recommended: mistral-small:latest

# Venice Configuration
VENICE_API_KEY=      # generate from venice settings
SMALL_VENICE_MODEL=  # Default: llama-3.3-70b
MEDIUM_VENICE_MODEL= # Default: llama-3.3-70b
LARGE_VENICE_MODEL=  # Default: llama-3.1-405b
IMAGE_VENICE_MODEL=  # Default: fluently-xl

# Nineteen.ai Configuration
NINETEEN_AI_API_KEY=      # Get a free api key from https://nineteen.ai/app/api
SMALL_NINETEEN_AI_MODEL=  # Default: unsloth/Llama-3.2-3B-Instruct
MEDIUM_NINETEEN_AI_MODEL= # Default: unsloth/Meta-Llama-3.1-8B-Instruct
LARGE_NINETEEN_AI_MODEL=  # Default: hugging-quants/Meta-Llama-3.1-70B-Instruct-AWQ-INT4
IMAGE_NINETEEN_AI_MODE=   # Default: dataautogpt3/ProteusV0.4-Lightning

# Akash Chat API Configuration docs: https://chatapi.akash.network/documentation
AKASH_CHAT_API_KEY=          # Get from https://chatapi.akash.network/
SMALL_AKASH_CHAT_API_MODEL=  # Default: Meta-Llama-3-2-3B-Instruct
MEDIUM_AKASH_CHAT_API_MODEL= # Default: Meta-Llama-3-3-70B-Instruct
LARGE_AKASH_CHAT_API_MODEL=  # Default: Meta-Llama-3-1-405B-Instruct-FP8

# Livepeer configuration

LIVEPEER_GATEWAY_URL=https://dream-gateway.livepeer.cloud           # Free inference gateways and docs: https://livepeer-eliza.com/
IMAGE_LIVEPEER_MODEL=           # Default: ByteDance/SDXL-Lightning
SMALL_LIVEPEER_MODEL=           # Default: meta-llama/Meta-Llama-3.1-8B-Instruct
MEDIUM_LIVEPEER_MODEL=          # Default: meta-llama/Meta-Llama-3.1-8B-Instruct
LARGE_LIVEPEER_MODEL=           # Default: meta-llama/Meta-Llama-3.1-8B-Instruct

# Speech Synthesis
ELEVENLABS_XI_API_KEY= # API key from elevenlabs

# Transcription Provider
TRANSCRIPTION_PROVIDER= # Default: local (possible values: openai, deepgram, local)

# ElevenLabs Settings
ELEVENLABS_MODEL_ID=eleven_multilingual_v2
ELEVENLABS_VOICE_ID=21m00Tcm4TlvDq8ikWAM
ELEVENLABS_VOICE_STABILITY=0.5
ELEVENLABS_VOICE_SIMILARITY_BOOST=0.9
ELEVENLABS_VOICE_STYLE=0.66
ELEVENLABS_VOICE_USE_SPEAKER_BOOST=false
ELEVENLABS_OPTIMIZE_STREAMING_LATENCY=4
ELEVENLABS_OUTPUT_FORMAT=pcm_16000

# OpenRouter Configuration
OPENROUTER_API_KEY= # OpenRouter API Key
OPENROUTER_MODEL=   # Default: uses hermes 70b/405b
SMALL_OPENROUTER_MODEL=
MEDIUM_OPENROUTER_MODEL=
LARGE_OPENROUTER_MODEL=

# REDPILL Configuration (https://docs.red-pill.ai/get-started/supported-models)
REDPILL_API_KEY= # REDPILL API Key
REDPILL_MODEL=
SMALL_REDPILL_MODEL=  # Default: gpt-4o-mini
MEDIUM_REDPILL_MODEL= # Default: gpt-4o
LARGE_REDPILL_MODEL=  # Default: gpt-4o

# Grok Configuration
GROK_API_KEY=         # GROK/xAI API Key
SMALL_GROK_MODEL=     # Default: grok-2-1212
MEDIUM_GROK_MODEL=    # Default: grok-2-1212
LARGE_GROK_MODEL=     # Default: grok-2-1212
EMBEDDING_GROK_MODEL= # Default: grok-2-1212

# Ollama Configuration
OLLAMA_SERVER_URL= # Default: localhost:11434
OLLAMA_MODEL=
USE_OLLAMA_EMBEDDING=   # Set to TRUE for OLLAMA/1024, leave blank for local
OLLAMA_EMBEDDING_MODEL= # Default: mxbai-embed-large
SMALL_OLLAMA_MODEL=     # Default: llama3.2
MEDIUM_OLLAMA_MODEL=    # Default: hermes3
LARGE_OLLAMA_MODEL=     # Default: hermes3:70b

# Google Configuration
GOOGLE_MODEL=
SMALL_GOOGLE_MODEL=     # Default: gemini-1.5-flash-latest
MEDIUM_GOOGLE_MODEL=    # Default: gemini-1.5-flash-latest
LARGE_GOOGLE_MODEL=     # Default: gemini-1.5-pro-latest
EMBEDDING_GOOGLE_MODEL= # Default: text-embedding-004

# Mistral Configuration
MISTRAL_MODEL=
SMALL_MISTRAL_MODEL=  # Default: mistral-small-latest
MEDIUM_MISTRAL_MODEL= # Default: mistral-large-latest
LARGE_MISTRAL_MODEL=  # Default: mistral-large-latest

# Groq Configuration
GROQ_API_KEY=         # Starts with gsk_
SMALL_GROQ_MODEL=     # Default: llama-3.1-8b-instant
MEDIUM_GROQ_MODEL=    # Default: llama-3.3-70b-versatile
LARGE_GROQ_MODEL=     # Default: llama-3.2-90b-vision-preview
EMBEDDING_GROQ_MODEL= # Default: llama-3.1-8b-instant

# LlamaLocal Configuration
LLAMALOCAL_PATH= # Default: "" which is the current directory in plugin-node/dist/ which gets destroyed and recreated on every build

# NanoGPT Configuration
SMALL_NANOGPT_MODEL=  # Default: gpt-4o-mini
MEDIUM_NANOGPT_MODEL= # Default: gpt-4o
LARGE_NANOGPT_MODEL=  # Default: gpt-4o

# Anthropic Configuration
ANTHROPIC_API_KEY=      # For Claude
ANTHROPIC_API_URL=
SMALL_ANTHROPIC_MODEL=  # Default: claude-3-haiku-20240307
MEDIUM_ANTHROPIC_MODEL= # Default: claude-3-5-sonnet-20241022
LARGE_ANTHROPIC_MODEL=  # Default: claude-3-5-sonnet-20241022

# Heurist Configuration
HEURIST_API_KEY=      # Get from https://heurist.ai/dev-access
SMALL_HEURIST_MODEL=  # Default: meta-llama/llama-3-70b-instruct
MEDIUM_HEURIST_MODEL= # Default: meta-llama/llama-3-70b-instruct
LARGE_HEURIST_MODEL=  # Default: meta-llama/llama-3.3-70b-instruct
HEURIST_IMAGE_MODEL=  # Default: FLUX.1-dev
HEURIST_EMBEDDING_MODEL= # Default: BAAI/bge-large-en-v1.5
USE_HEURIST_EMBEDDING= # Set to TRUE for HEURIST embedding, leave blank for local

# Gaianet Configuration
GAIANET_MODEL=
GAIANET_SERVER_URL=
SMALL_GAIANET_MODEL=       # Default: llama3b
SMALL_GAIANET_SERVER_URL=  # Default: https://llama3b.gaia.domains/v1
MEDIUM_GAIANET_MODEL=      # Default: llama
MEDIUM_GAIANET_SERVER_URL= # Default: https://llama8b.gaia.domains/v1
LARGE_GAIANET_MODEL=       # Default: qwen72b
LARGE_GAIANET_SERVER_URL=  # Default: https://qwen72b.gaia.domains/v1
GAIANET_EMBEDDING_MODEL=
USE_GAIANET_EMBEDDING= # Set to TRUE for GAIANET/768, leave blank for local

# Volcengine Configuration
VOLENGINE_API_URL= # Volcengine API Endpoint, Default: https://open.volcengineapi.com/api/v3/
VOLENGINE_MODEL=
SMALL_VOLENGINE_MODEL=     # Default: doubao-lite-128k
MEDIUM_VOLENGINE_MODEL=    # Default: doubao-pro-128k
LARGE_VOLENGINE_MODEL=     # Default: doubao-pro-256k
VOLENGINE_EMBEDDING_MODEL= # Default: doubao-embedding

# DeepSeek Configuration
DEEPSEEK_API_KEY=      #Your DeepSeek API key
DEEPSEEK_API_URL=      # Default: https://api.deepseek.com
SMALL_DEEPSEEK_MODEL=  # Default: deepseek-chat
MEDIUM_DEEPSEEK_MODEL= # Default: deepseek-chat
LARGE_DEEPSEEK_MODEL=  # Default: deepseek-chat

# fal.ai Configuration
FAL_API_KEY=
FAL_AI_LORA_PATH=

# LetzAI Configuration
LETZAI_API_KEY= # LetzAI API Key
LETZAI_MODELS=  # list of Letzai models to add to each prompt, e.g.: "@modelname1, @modelname2"

# Galadriel Configuration
GALADRIEL_API_KEY=gal-*      # Get from https://dashboard.galadriel.com/
SMALL_GALADRIEL_MODEL=       # Default: gpt-4o-mini
MEDIUM_GALADRIEL_MODEL=      # Default: gpt-4o
LARGE_GALADRIEL_MODEL=       # Default: gpt-4o
GALADRIEL_FINE_TUNE_API_KEY= # Use an OpenAI key to use a fine-tuned model with the verified inference endpoint

# LM Studio Configuration
LMSTUDIO_SERVER_URL=   # Default: http://localhost:1234/v1
LMSTUDIO_MODEL=
SMALL_LMSTUDIO_MODEL=  # Default: hermes-3-llama-3.1-8b
MEDIUM_LMSTUDIO_MODEL= # Default: hermes-3-llama-3.1-8b
LARGE_LMSTUDIO_MODEL=  # Default: hermes-3-llama-3.1-8b

# Secret AI Configuration
SECRET_AI_API_KEY=            # Secret AI API Key
SECRET_AI_URL=                # Default: https://ai1.scrtlabs.com:21434
SMALL_SECRET_AI_MODEL=        # Default: deepseek-r1:70b
MEDIUM_SECRET_AI_MODEL=       # Default: deepseek-r1:70b
LARGE_SECRET_AI_MODEL=        # Default: deepseek-r1:70b

# NEAR AI (https://near.ai) Configuration
NEARAI_API_URL=      # Default: https://api.near.ai/v1
NEARAI_API_KEY=      # NEAR AI API Key (optional). If you have run `nearai login` with NEAR AI CLI, the API key will be parsed from `~/.nearai/config.json`: https://docs.near.ai/agents/quickstart/
NEARAI_MODEL=
SMALL_NEARAI_MODEL=  # Default: fireworks::accounts/fireworks/models/llama-v3p2-3b-instruct
MEDIUM_NEARAI_MODEL= # Default: fireworks::accounts/fireworks/models/llama-v3p1-70b-instruct
LARGE_NEARAI_MODEL=  # Default: fireworks::accounts/fireworks/models/llama-v3p1-405b-instruct
IMAGE_NEARAI_MODEL=   # Default: fireworks::accounts/fireworks/models/playground-v2-5-1024px-aesthetic

# Remaining Provider Configurations
GOOGLE_GENERATIVE_AI_API_KEY= # Gemini API key
ALI_BAILIAN_API_KEY=          # Ali Bailian API Key
NANOGPT_API_KEY=              # NanoGPT API Key
TOGETHER_API_KEY=             # Together API Key

######################################
#### Crypto Plugin Configurations ####
######################################

# CoinMarketCap / CMC
COINMARKETCAP_API_KEY=

# Zerion
ZERION_API_KEY=

# CoinGecko
COINGECKO_API_KEY=
COINGECKO_PRO_API_KEY=

# Moralis
MORALIS_API_KEY=

# EVM
EVM_PRIVATE_KEY=          # Add the "0x" prefix infront of your private key string                  
EVM_PROVIDER_URL=

# Zilliqa
ZILLIQA_PRIVATE_KEY=
ZILLIQA_PROVIDER_URL=

# Avalanche
AVALANCHE_PRIVATE_KEY=
AVALANCHE_PUBLIC_KEY=

# Arthera
ARTHERA_PRIVATE_KEY=

# Solana
SOLANA_PRIVATE_KEY=
SOLANA_PUBLIC_KEY=
SOLANA_CLUSTER=           # Default: devnet. Solana Cluster: 'devnet' | 'testnet' | 'mainnet-beta'
SOLANA_ADMIN_PRIVATE_KEY= # This wallet is used to verify NFTs
SOLANA_ADMIN_PUBLIC_KEY=  # This wallet is used to verify NFTs
SOLANA_VERIFY_TOKEN=      # Authentication token for calling the verification API

# Injective
INJECTIVE_PRIVATE_KEY= #
INJECTIVE_PUBLIC_KEY= #
INJECTIVE_NETWORK= #
# Fallback Wallet Configuration (deprecated)
WALLET_PRIVATE_KEY=
WALLET_PUBLIC_KEY=

BIRDEYE_API_KEY=

# Solana Configuration
SOL_ADDRESS=So11111111111111111111111111111111111111112
SLIPPAGE=1
BASE_MINT=So11111111111111111111111111111111111111112
SOLANA_RPC_URL=https://api.mainnet-beta.solana.com
HELIUS_API_KEY=

# Abstract Configuration
ABSTRACT_ADDRESS=
ABSTRACT_PRIVATE_KEY=
ABSTRACT_RPC_URL=https://api.testnet.abs.xyz

# Starknet Configuration
STARKNET_ADDRESS=
STARKNET_PRIVATE_KEY=
STARKNET_RPC_URL=https://rpc.starknet-testnet.lava.build

# Lens Network Configuration
LENS_ADDRESS=
LENS_PRIVATE_KEY=

# Viction Configuration
VICTION_ADDRESS=
VICTION_PRIVATE_KEY=
VICTION_RPC_URL=

# Form Chain
FORM_PRIVATE_KEY= # Form character account private key
FORM_TESTNET=true # A flag indicating if connection is made to Form Testnet. Set to false for Mainnet connection.

# Coinbase
COINBASE_COMMERCE_KEY=              # From Coinbase developer portal
COINBASE_API_KEY=                   # From Coinbase developer portal
COINBASE_PRIVATE_KEY=               # From Coinbase developer portal
COINBASE_GENERATED_WALLET_ID=       # Not your address but the wallet ID from generating a wallet through the plugin
COINBASE_GENERATED_WALLET_HEX_SEED= # Not your address but the wallet hex seed from generating a wallet through the plugin and calling export
COINBASE_NOTIFICATION_URI=          # For webhook plugin the uri you want to send the webhook to for dummy ones use https://webhook.site

# Coinbase AgentKit
CDP_API_KEY_NAME=
CDP_API_KEY_PRIVATE_KEY=
CDP_AGENT_KIT_NETWORK=base-sepolia # Optional: Defaults to base-sepolia

# Coinbase Charity Configuration
IS_CHARITABLE=false # Set to true to enable charity donations
CHARITY_ADDRESS_BASE=0x1234567890123456789012345678901234567890
CHARITY_ADDRESS_SOL=pWvDXKu6CpbKKvKQkZvDA66hgsTB6X2AgFxksYogHLV
CHARITY_ADDRESS_ETH=0x750EF1D7a0b4Ab1c97B7A623D7917CcEb5ea779C
CHARITY_ADDRESS_ARB=0x1234567890123456789012345678901234567890
CHARITY_ADDRESS_POL=0x1234567890123456789012345678901234567890

# thirdweb
THIRDWEB_SECRET_KEY= # Create key on thirdweb developer dashboard: https://thirdweb.com/

# Conflux Configuration
CONFLUX_CORE_PRIVATE_KEY=
CONFLUX_CORE_SPACE_RPC_URL=
CONFLUX_ESPACE_PRIVATE_KEY=
CONFLUX_ESPACE_RPC_URL=
CONFLUX_MEME_CONTRACT_ADDRESS=

# Mind Network Configuration
MIND_HOT_WALLET_PRIVATE_KEY=
MIND_COLD_WALLET_ADDRESS=

# ZeroG
ZEROG_INDEXER_RPC=
ZEROG_EVM_RPC=
ZEROG_PRIVATE_KEY=
ZEROG_FLOW_ADDRESS=

# IQ6900
# Load json recorded on-chain through IQ
# Inscribe your json character file here: https://elizacodein.com/

IQ_WALLET_ADDRESS=              # If you enter the wallet address used on the site, the most recently inscribed json will be loaded.
IQSOlRPC=

# Squid Router
SQUID_SDK_URL=https://apiplus.squidrouter.com # Default: https://apiplus.squidrouter.com
SQUID_INTEGRATOR_ID=                          # get integrator id through https://docs.squidrouter.com/
SQUID_EVM_ADDRESS=
SQUID_EVM_PRIVATE_KEY=
SQUID_API_THROTTLE_INTERVAL=1000 # Default: 1000; Used to throttle API calls to avoid rate limiting (in ms)

# TEE Configuration
# TEE_MODE options:
# - LOCAL: Uses simulator at localhost:8090 (for local development)
# - DOCKER: Uses simulator at host.docker.internal:8090 (for docker development)
# - PRODUCTION: No simulator, uses production endpoints
# Defaults to OFF if not specified
TEE_MODE=OFF        # LOCAL | DOCKER | PRODUCTION
WALLET_SECRET_SALT= # ONLY define if you want to use TEE Plugin, otherwise it will throw errors
TEE_LOG_DB_PATH=    # Custom path for TEE Log database, default: ./data/tee_log.sqlite

# TEE Verifiable Log Configuration
VLOG= # true/false;  if you want to use TEE Verifiable Log, set this to "true"

# Galadriel Configuration
GALADRIEL_API_KEY=gal-* # Get from https://dashboard.galadriel.com/


# Akash Chat API Configuration docs: https://chatapi.akash.network/documentation
AKASH_CHAT_API_KEY=          # Get from https://chatapi.akash.network/
SMALL_AKASH_CHAT_API_MODEL=  # Default: Meta-Llama-3-2-3B-Instruct
MEDIUM_AKASH_CHAT_API_MODEL= # Default: Meta-Llama-3-3-70B-Instruct
LARGE_AKASH_CHAT_API_MODEL=  # Default: Meta-Llama-3-1-405B-Instruct-FP8

# fal.ai Configuration
FAL_API_KEY=
FAL_AI_LORA_PATH=

# Web search API Configuration
TAVILY_API_KEY=

# WhatsApp Cloud API Configuration
WHATSAPP_ACCESS_TOKEN=         # Permanent access token from Facebook Developer Console
WHATSAPP_PHONE_NUMBER_ID=      # Phone number ID from WhatsApp Business API
WHATSAPP_BUSINESS_ACCOUNT_ID=  # Business Account ID from Facebook Business Manager
WHATSAPP_WEBHOOK_VERIFY_TOKEN= # Custom string for webhook verification
WHATSAPP_API_VERSION=v17.0     # WhatsApp API version (default: v17.0)
ENABLE_TEE_LOG=false           # Set to true to enable TEE logging, only available when running eliza in TEE

# Flow Blockchain Configuration
FLOW_ADDRESS=
FLOW_PRIVATE_KEY=  # Private key for SHA3-256 + P256 ECDSA
FLOW_NETWORK=      # Default: mainnet
FLOW_ENDPOINT_URL= # Default: https://mainnet.onflow.org

# ICP
INTERNET_COMPUTER_PRIVATE_KEY=
INTERNET_COMPUTER_ADDRESS=

#Cloudflare AI Gateway
CLOUDFLARE_GW_ENABLED=    # Set to true to enable Cloudflare AI Gateway
CLOUDFLARE_AI_ACCOUNT_ID= # Cloudflare AI Account ID - found in the Cloudflare Dashboard under AI Gateway
CLOUDFLARE_AI_GATEWAY_ID= # Cloudflare AI Gateway ID - found in the Cloudflare Dashboard under AI Gateway

# Aptos
APTOS_PRIVATE_KEY= # Aptos private key
APTOS_NETWORK=     # Must be one of mainnet, testnet

# MultiversX
MVX_PRIVATE_KEY=                    # Multiversx private key
MVX_NETWORK=                        # must be one of mainnet, devnet, testnet
ACCESS_TOKEN_MANAGEMENT_TO=everyone  # you can put an userid to limit token managament to one user only (use same id as in the database)

# NEAR
NEAR_WALLET_SECRET_KEY= # NEAR Wallet Secret Key
NEAR_WALLET_PUBLIC_KEY= # NEAR Wallet Public Key
NEAR_ADDRESS=
NEAR_SLIPPAGE=1
NEAR_RPC_URL=https://near-testnet.lava.build
NEAR_NETWORK=testnet # or mainnet

# ZKsync Era Configuration
ZKSYNC_ADDRESS=
ZKSYNC_PRIVATE_KEY=

# HoldStation Wallet Configuration
HOLDSTATION_PRIVATE_KEY=

# Avail DA Configuration
AVAIL_ADDRESS=
AVAIL_SEED=
AVAIL_APP_ID=0
AVAIL_RPC_URL=wss://avail-turing.public.blastapi.io/ # (Default) Testnet: wss://avail-turing.public.blastapi.io/ | Mainnet: wss://avail-mainnet.public.blastapi.io/

# Marlin
TEE_MARLIN=                      # Set "yes" to enable the plugin
TEE_MARLIN_ATTESTATION_ENDPOINT= # Optional, default "http://127.0.0.1:1350"

# Ton
TON_PRIVATE_KEY= # Ton Mnemonic Seed Phrase Join With Empty String
TON_RPC_URL=     # ton rpc
TON_RPC_API_KEY= # ton rpc api key
TON_NFT_IMAGES_FOLDER= # Path to the folder containing the NFT images
TON_NFT_METADATA_FOLDER= # Path to the folder containing the NFT metadata
PINATA_API_KEY= # Pinata API key
PINATA_API_SECRET= # Pinata API secret

# Sui
SUI_PRIVATE_KEY= # Sui Mnemonic Seed Phrase (`sui keytool generate ed25519`) , Also support `suiprivatekeyxxxx` (sui keytool export --key-identity 0x63)
SUI_NETWORK=     # must be one of mainnet, testnet, devnet, localnet

# Mina Settings
MINA_PRIVATE_KEY= # Mina Mnemonic Seed Phrase: https://docs.minaprotocol.com/using-mina/install-a-wallet
MINA_NETWORK=devnet # must be one of mainnet, testnet, devnet, localnet

# Story
STORY_PRIVATE_KEY=  # Story private key
STORY_API_BASE_URL= # Story API base URL
STORY_API_KEY=      # Story API key
PINATA_JWT=         # Pinata JWT for uploading files to IPFS

# Cosmos
COSMOS_RECOVERY_PHRASE=  # 12 words recovery phrase (need to be in quotes, because of spaces)
COSMOS_AVAILABLE_CHAINS= # mantrachaintestnet2,cosmos  # Array of chains
# Cronos zkEVM
CRONOSZKEVM_ADDRESS=
CRONOSZKEVM_PRIVATE_KEY=


# Fuel Ecosystem (FuelVM)
FUEL_WALLET_PRIVATE_KEY=

# Tokenizer Settings
TOKENIZER_MODEL= # Specify the tokenizer model to be used.
TOKENIZER_TYPE=  # Options: tiktoken (for OpenAI models) or auto (AutoTokenizer from Hugging Face for non-OpenAI models). Default: tiktoken.

# Spheron
SPHERON_PRIVATE_KEY=
SPHERON_PROVIDER_PROXY_URL=
SPHERON_WALLET_ADDRESS=

# Stargaze NFT marketplace from Cosmos (You can use https://graphql.mainnet.stargaze-apis.com/graphql)
STARGAZE_ENDPOINT=

# GenLayer
GENLAYER_PRIVATE_KEY= # Private key of the GenLayer account to use for the agent in this format (0x0000000000000000000000000000000000000000000000000000000000000000)

# BNB chain
BNB_PRIVATE_KEY=            # BNB chain private key
BNB_PUBLIC_KEY=             # BNB-smart-chain public key (address)
BSC_PROVIDER_URL=           # BNB-smart-chain rpc url
OPBNB_PROVIDER_URL=         # OPBNB rpc url

####################################
#### Misc Plugin Configurations ####
####################################

# Intiface Configuration
INTIFACE_WEBSOCKET_URL=ws://localhost:12345

# API key for giphy from https://developers.giphy.com/dashboard/
GIPHY_API_KEY=

# OpenWeather
OPEN_WEATHER_API_KEY= # OpenWeather API key

#GITCOIN Passport
PASSPORT_API_KEY= #Gitcoin Passport key
PASSPORT_SCORER=  #Scorer number

# EchoChambers Configuration
ECHOCHAMBERS_API_URL=http://127.0.0.1:3333
ECHOCHAMBERS_API_KEY=testingkey0011
ECHOCHAMBERS_USERNAME=eliza
ECHOCHAMBERS_ROOMS=general #comma delimited list of rooms the agent watches
ECHOCHAMBERS_POLL_INTERVAL=60
ECHOCHAMBERS_MAX_MESSAGES=10
# How often the agent checks if it should start a conversation
ECHOCHAMBERS_CONVERSATION_STARTER_INTERVAL=300 # 5 minutes - checks rooms every 5 minutes

# How long a room must be quiet before starting a new conversation
ECHOCHAMBERS_QUIET_PERIOD=900 # 15 minutes - waits for 15 minutes of silence

# Allora
ALLORA_API_KEY=    # Allora API key, format: UP-f8db7d6558ab432ca0d92716
ALLORA_CHAIN_SLUG= # must be one of mainnet, testnet. If not specified, it will use testnet by default


# B2 Network
B2_PRIVATE_KEY= # Private key of the B2 Network account to use for the agent

# Opacity zkTLS
OPACITY_TEAM_ID=f309ac8ae8a9a14a7e62cd1a521b1c5f
OPACITY_CLOUDFLARE_NAME=eigen-test
OPACITY_PROVER_URL=https://opacity-ai-zktls-demo.vercel.app

# AWS Credentials for S3 File Upload and Amazon Bedrock
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_REGION=
AWS_S3_BUCKET=
AWS_S3_UPLOAD_PATH=
AWS_S3_ENDPOINT=
AWS_S3_SSL_ENABLED=
AWS_S3_FORCE_PATH_STYLE=


# Deva Configuration
DEVA_API_KEY= # You can get the API key from the created application in deva.me/settings/apps
DEVA_API_BASE_URL=https://api.deva.me # Default server url for production. Use https://api-staging.deva.me for staging.

# Deepgram
DEEPGRAM_API_KEY=

# Verifiable Inference Configuration
VERIFIABLE_INFERENCE_ENABLED=false    # Set to false to disable verifiable inference
VERIFIABLE_INFERENCE_PROVIDER=opacity # Options: opacity

# Qdrant
# URL of your Qdrant instance (e.g., https://your-instance.qdrant.tech)
QDRANT_URL=
# API key for authentication (optional for local instances)
QDRANT_KEY=
# Qdrant service port (default: 443 for cloud, typically 6333 for local)
QDRANT_PORT=443
# Vector size matching your embedding model (default: 1536 for OpenAI embeddings)
QDRANT_VECTOR_SIZE=1536

# Autonome Configuration
AUTONOME_JWT_TOKEN=
AUTONOME_RPC=https://wizard-bff-rpc.alt.technology/v1/bff/aaa/apps

####################################
#### Akash Network Configuration ####
####################################
AKASH_ENV=mainnet
AKASH_NET=https://raw.githubusercontent.com/ovrclk/net/master/mainnet
RPC_ENDPOINT=https://rpc.akashnet.net:443
AKASH_GAS_PRICES=0.025uakt
AKASH_GAS_ADJUSTMENT=1.5
AKASH_KEYRING_BACKEND=os
AKASH_FROM=default
AKASH_FEES=20000uakt
AKASH_DEPOSIT=500000uakt
AKASH_MNEMONIC=
AKASH_WALLET_ADDRESS=
# Akash Pricing API
AKASH_PRICING_API_URL=https://console-api.akash.network/v1/pricing
# Default values # 1 CPU = 1000 1GB = 1000000000 1GB = 1000000000
AKASH_DEFAULT_CPU=1000
AKASH_DEFAULT_MEMORY=1000000000
AKASH_DEFAULT_STORAGE=1000000000
AKASH_SDL=example.sdl.yml
# Close deployment
# Close all deployments = closeAll
# Close a single deployment = dseq and add the value in AKASH_CLOSE_DSEQ
AKASH_CLOSE_DEP=closeAll
AKASH_CLOSE_DSEQ=19729929
# Provider Info we added one to check you will have to pass this into the action
AKASH_PROVIDER_INFO=akash1ccktptfkvdc67msasmesuy5m7gpc76z75kukpz
# Deployment Status
# AKASH_DEP_STATUS = dseq or param_passed when you are building you wil pass the dseq dinamically to test you
# you can pass the dseq using AKASH_DEP_DSEQ 19729929 is an example of a dseq we test while build.
AKASH_DEP_STATUS=dseq
AKASH_DEP_DSEQ=19729929
# Gas Estimation Options: close, create, or update
# qseq is required when operation is "close" 19729929 is an example of a dseq we test while build.
AKASH_GAS_OPERATION=close
AKASH_GAS_DSEQ=19729929
# Manifest
# Values: "auto" | "manual" | "validate_only" Default: "auto"
AKASH_MANIFEST_MODE=auto
# Default: Will use the SDL directory
AKASH_MANIFEST_PATH=
# Values: "strict" | "lenient" | "none" - Default: "strict"
AKASH_MANIFEST_VALIDATION_LEVEL=strict
# Quai Network Ecosystem
QUAI_PRIVATE_KEY=
QUAI_RPC_URL=https://rpc.quai.network

# Chainbase
# demo is a free tier key
CHAINBASE_API_KEY= # demo is a free tier key

# 0x
ZERO_EX_API_KEY=
ALCHEMY_HTTP_TRANSPORT_URL=

# Instagram Configuration
INSTAGRAM_DRY_RUN=false
INSTAGRAM_USERNAME=               # Account username
INSTAGRAM_PASSWORD=               # Account password
INSTAGRAM_APP_ID=                 # Instagram App ID is required
INSTAGRAM_APP_SECRET=             # Instagram App Secret is required
INSTAGRAM_BUSINESS_ACCOUNT_ID=    # Optional Business Account ID for additional features
INSTAGRAM_POST_INTERVAL_MIN=60    # Default: 60 minutes
INSTAGRAM_POST_INTERVAL_MAX=120   # Default: 120 minutes
INSTAGRAM_ENABLE_ACTION_PROCESSING=false  # Enable/disable action processing
INSTAGRAM_ACTION_INTERVAL=5       # Interval between actions in minutes
INSTAGRAM_MAX_ACTIONS=1          # Maximum number of actions to process at once

####################################
#### Pyth Plugin Configuration ####
####################################
# Network Environment (mainnet or testnet)git
PYTH_NETWORK_ENV=mainnet

# Mainnet Network Configuration
PYTH_MAINNET_HERMES_URL=https://hermes.pyth.network
PYTH_MAINNET_WSS_URL=wss://hermes.pyth.network/ws
PYTH_MAINNET_PYTHNET_URL=https://pythnet.rpcpool.com
PYTH_MAINNET_CONTRACT_REGISTRY=https://pyth.network/developers/price-feed-ids
PYTH_MAINNET_PROGRAM_KEY=

# Testnet Network Configuration
PYTH_TESTNET_HERMES_URL=https://hermes.pyth.network
PYTH_TESTNET_WSS_URL=wss://hermes.pyth.network/ws
PYTH_TESTNET_PYTHNET_URL=https://pythnet.rpcpool.com
PYTH_TESTNET_CONTRACT_REGISTRY=https://pyth.network/developers/price-feed-ids#testnet
PYTH_TESTNET_PROGRAM_KEY=

# Connection Settings
PYTH_MAX_RETRIES=3
PYTH_RETRY_DELAY=1000
PYTH_TIMEOUT=5000
PYTH_GRANULAR_LOG=true
PYTH_LOG_LEVEL=debug
PYTH_LOG_LEVEL=info

# Runtime Settings
RUNTIME_CHECK_MODE=false

# Pyth Price Streaming and test ID
PYTH_ENABLE_PRICE_STREAMING=true
PYTH_MAX_PRICE_STREAMS=2
PYTH_TEST_ID01=0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43
PYTH_TEST_ID02=0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace

# Router Nitro EVM Configuration
ROUTER_NITRO_EVM_ADDRESS=
ROUTER_NITRO_EVM_PRIVATE_KEY=

# OriginTrail DKG
DKG_ENVIRONMENT=""
# Values: "development", "testnet", "mainnet"
DKG_HOSTNAME=""
DKG_PORT="8900"
DKG_PUBLIC_KEY=""
DKG_PRIVATE_KEY=""
DKG_BLOCKCHAIN_NAME=""
# Values: (mainnet) "base:8453", "gnosis:100", "otp:2043" (testnet) "base:84532", "gnosis:10200", "otp:20430"

# Initia Plugin Configuration
INITIA_PRIVATE_KEY=  # Your Initia wallet private key
INITIA_NODE_URL=  # Initia node URL (default: testnet)
INITIA_CHAIN_ID=initia-test  # Chain ID (default: testnet)

# ####################################
# #### NVIDIA Configuration ##########
# ####################################
NVIDIA_NIM_ENV=production
NVIDIA_NIM_SPASH=false
# Api Keys
NVIDIA_NIM_API_KEY=
NVIDIA_NGC_API_KEY=
NVIDIA_NIM_MAX_RETRIES=3
NVIDIA_NIM_RETRY_DELAY=1000
NVIDIA_NIM_TIMEOUT=5000
# Logging Configuration
NVIDIA_GRANULAR_LOG=true
NVIDIA_LOG_LEVEL=debug
# NVIDIA Off-topic system and user configuration
NVIDIA_OFFTOPIC_SYSTEM=
NVIDIA_OFFTOPIC_USER=
# NVIDIA Cosmos Model Configuration
NVIDIA_NIM_BASE_VISION_URL=https://ai.api.nvidia.com/v1/vlm
NVIDIA_COSMOS_MODEL=nvidia/cosmos-nemotron-34b
NVIDIA_COSMOS_INVOKE_URL=https://ai.api.nvidia.com/v1/vlm/nvidia/cosmos-nemotron-34b
NVIDIA_COSMOS_ASSET_URL=https://api.nvcf.nvidia.com/v2/nvcf/assets
NVIDIA_COSMOS_MAX_TOKENS=1000

# Email Plugin Configuration

# Outgoing Email Settings (SMTP/Gmail)
EMAIL_OUTGOING_SERVICE=smtp    # Use "smtp" or "gmail"
EMAIL_OUTGOING_HOST=smtp.example.com    # Required for SMTP only
EMAIL_OUTGOING_PORT=465    # Default 465 for secure SMTP, 587 for TLS
EMAIL_OUTGOING_USER=
EMAIL_OUTGOING_PASS=  # For Gmail, use App Password

# Incoming Email Settings (IMAP)
EMAIL_INCOMING_SERVICE=imap
EMAIL_INCOMING_HOST=imap.example.com
EMAIL_INCOMING_PORT=993    # Default port for secure IMAP
EMAIL_INCOMING_USER=
EMAIL_INCOMING_PASS=

# SEI Network Ecosystem
SEI_PRIVATE_KEY=
SEI_NETWORK=   # Either "mainnet", "testnet", or "devnet"
SEI_RPC_URL=    # Only set if using a different RPC URL from the default

# Omniflix
OMNIFLIX_API_URL=                    # https://rest.omniflix.network
OMNIFLIX_MNEMONIC=                   # your mnemonic 12 words or 24 words
OMNIFLIX_RPC_ENDPOINT=               # https://rpc.omniflix.network
OMNIFLIX_PRIVATE_KEY=                 # your private key

# Suno AI Music Generation
SUNO_API_KEY=

# Udio AI Music Generation
UDIO_AUTH_TOKEN=

# Football Plugin Configuration
FOOTBALL_API_KEY=                   # API key from Football-Data.org (https://www.football-data.org/)

# Imgflip
IMGFLIP_USERNAME=
IMGFLIP_PASSWORD=

# Hyperliquid Api
HYPERLIQUID_PRIVATE_KEY=    # Required for trading and cancelling orders, your_private_key
HYPERLIQUID_TESTNET=        # Optional, defaults to false; true or false

# Lit Protocol
FUNDING_PRIVATE_KEY=    # Private key for funding transactions in Lit Protocol
EVM_RPC_URL=                # RPC endpoint URL for blockchain interactions

# EthStorage DA Configuration
ETHSTORAGE_PRIVATE_KEY=
ETHSTORAGE_ADDRESS=0x64003adbdf3014f7E38FC6BE752EB047b95da89A
ETHSTORAGE_RPC_URL=https://rpc.beta.testnet.l2.quarkchain.io:8545


# Email Automation Plugin Configuration
RESEND_API_KEY=           # Your Resend API key
DEFAULT_TO_EMAIL=         # Default recipient
DEFAULT_FROM_EMAIL=       # Default sender

# Optional Settings
EMAIL_AUTOMATION_ENABLED=false    # Enable AI detection. If this is enabled, the plugin will automatically detect email-worthy conversations and handle generation/delivery and only that.
EMAIL_EVALUATION_PROMPT=        # Custom detection criteria for shouldEmail# ####################################


# #### ANKR Configuration ####
# ####################################
ANKR_ENV=production
ANKR_WALLET=
ANKR_MAX_RETRIES=3
ANKR_RETRY_DELAY=1000
ANKR_TIMEOUT=5000
ANKR_GRANULAR_LOG=true
ANKR_LOG_LEVEL=debug
ANKR_RUNTIME_CHECK_MODE=false
ANKR_SPASH=true

# DCAP Plugin Configuration
DCAP_EVM_PRIVATE_KEY=
DCAP_MODE=                       # Options: OFF, PLUGIN-SGX, PLUGIN-TEE, MOCK

# QuickIntel Token Security API
QUICKINTEL_API_KEY=              # Your QuickIntel API key for token security analysis

# News API Key
NEWS_API_KEY= # News API KEY from https://newsapi.org/

# BTCFUN Plugin Configuration
BTCFUN_API_URL=                  # Default: https://api-testnet-new.btc.fun
BTC_PRIVATE_KEY_WIF=             # Your BTC private key in WIF format
BTC_ADDRESS=                     # Your BTC address
BTC_MINT_CAP=10000              # Maximum amount that can be minted
BTC_MINT_DEADLINE=864000        # Deadline for minting in seconds
BTC_FUNDRAISING_CAP=100         # Maximum amount for fundraising

# Trikon Plugin Configuration
TRIKON_WALLET_ADDRESS= # Your Trikon wallet address (must be a valid 64-character hex string starting with '0x')
TRIKON_INITIAL_BALANCE= # (Optional) The initial balance for the wallet. Defaults to "0" if not provided.

####################################
#### Arbitrage Plugin Configuration ####
####################################

ARBITRAGE_ETHEREUM_WS_URL=                  # WebSocket URL for Ethereum node connection
ARBITRAGE_EVM_PROVIDER_URL=                 # RPC URL for Ethereum node connection (if WS not available)
ARBITRAGE_EVM_PRIVATE_KEY=                  # Private key for the wallet executing arbitrage transactions
FLASHBOTS_RELAY_SIGNING_KEY=      # Signing key for Flashbots relay interactions
BUNDLE_EXECUTOR_ADDRESS=          # Address of the bundle executor contract

# DESK Exchange Plugin Configration
DESK_EXCHANGE_PRIVATE_KEY=                  # Required for trading and cancelling orders
DESK_EXCHANGE_NETWORK=                      # "mainnet" or "testnet

# Compass plugin configuration
COMPASS_WALLET_PRIVATE_KEY=
COMPASS_ARBITRUM_RPC_URL=
COMPASS_ETHEREUM_RPC_URL=
COMPASS_BASE_RPC_URL=

# d.a.t.a Plugin Configurations
DATA_API_KEY=           # Your d.a.t.a API key
DATA_AUTH_TOKEN=       # Your d.a.t.a auth token

# NKN Configuration
NKN_CLIENT_PRIVATE_KEY=           # Required, NKN client private key
NKN_CLIENT_ID=                    # Optional, NKN client ID